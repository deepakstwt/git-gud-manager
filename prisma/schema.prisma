generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imageUrl       String?
  firstName      String?
  lastName       String?
  emailAddress   String          @unique
  questions      Question[]
  UserToProjects UserToProject[]
}

model Project {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  name                 String
  githubUrl            String?
  deletedAt            DateTime?
  archived             Boolean               @default(false)
  archivedAt           DateTime?
  description          String?
  userId               String?
  commits              Comment[]
  documents            Document[]
  ProjectInvitation    ProjectInvitation[]
  ProjectMember        ProjectMember[]
  questions            Question[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  UserToProjects       UserToProject[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Comment {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  projectId          String
  commitHash         String
  commitMessage      String
  commitAuthorName   String?
  commitAuthorAvatar String?
  commitDate         DateTime?
  summary            String?
  commitType         String?
  complexity         Float?
  filesChanged       Int?      @default(0)
  isBreakingChange   Boolean   @default(false)
  linesAdded         Int?      @default(0)
  linesDeleted       Int?      @default(0)
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, commitHash])
  @@index([commitDate])
  @@index([commitType])
}

model Document {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  fileName  String
  filePath  String
  summary   String
  content   String
  embedding String?
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, fileName])
  @@index([projectId])
}

model SourceCodeEmbedding {
  id        String                 @id @default(cuid())
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  projectId String
  fileName  String
  filePath  String
  summary   String
  source    String
  embedding Unsupported("vector")?
  project   Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, fileName])
  @@index([projectId])
}

model Question {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  projectId      String
  userId         String
  text           String
  answer         String
  fileReferences Json
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model ProjectInvitation {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  projectId String
  email     String
  invitedBy String
  status    String   @default("pending")
  expiresAt DateTime
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@index([email])
  @@index([projectId])
}

model ProjectMember {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  projectId String
  name      String
  email     String
  role      String   @default("member")
  addedBy   String
  status    String   @default("active")
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@index([email])
  @@index([projectId])
}
